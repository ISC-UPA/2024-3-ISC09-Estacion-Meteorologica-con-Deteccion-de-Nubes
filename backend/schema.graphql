# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Login {
  id: ID!
  idUser: Int
  nombre: String
  username: String
  passsword: String
}

input LoginWhereUniqueInput {
  id: ID
  idUser: Int
}

input LoginWhereInput {
  AND: [LoginWhereInput!]
  OR: [LoginWhereInput!]
  NOT: [LoginWhereInput!]
  id: IDFilter
  idUser: IntFilter
  nombre: StringFilter
  username: StringFilter
  passsword: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input LoginOrderByInput {
  id: OrderDirection
  idUser: OrderDirection
  nombre: OrderDirection
  username: OrderDirection
  passsword: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input LoginUpdateInput {
  idUser: Int
  nombre: String
  username: String
  passsword: String
}

input LoginUpdateArgs {
  where: LoginWhereUniqueInput!
  data: LoginUpdateInput!
}

input LoginCreateInput {
  idUser: Int
  nombre: String
  username: String
  passsword: String
}

type Usuario {
  id: ID!
  usuario_id: Int
  nombre: String
  email: String
  contrasena: PasswordState
  telefono: String
  fecha_creacion: DateTime
  fotos(where: FotoCieloWhereInput! = {}, orderBy: [FotoCieloOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FotoCieloWhereUniqueInput): [FotoCielo!]
  fotosCount(where: FotoCieloWhereInput! = {}): Int
  lecturas(where: LecturaMeteorologiaWhereInput! = {}, orderBy: [LecturaMeteorologiaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LecturaMeteorologiaWhereUniqueInput): [LecturaMeteorologia!]
  lecturasCount(where: LecturaMeteorologiaWhereInput! = {}): Int
  ubicaciones(where: UbicacionWhereInput! = {}, orderBy: [UbicacionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UbicacionWhereUniqueInput): [Ubicacion!]
  ubicacionesCount(where: UbicacionWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UsuarioWhereUniqueInput {
  id: ID
  email: String
}

input UsuarioWhereInput {
  AND: [UsuarioWhereInput!]
  OR: [UsuarioWhereInput!]
  NOT: [UsuarioWhereInput!]
  id: IDFilter
  usuario_id: IntFilter
  nombre: StringFilter
  email: StringFilter
  telefono: StringFilter
  fecha_creacion: DateTimeNullableFilter
  fotos: FotoCieloManyRelationFilter
  lecturas: LecturaMeteorologiaManyRelationFilter
  ubicaciones: UbicacionManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FotoCieloManyRelationFilter {
  every: FotoCieloWhereInput
  some: FotoCieloWhereInput
  none: FotoCieloWhereInput
}

input LecturaMeteorologiaManyRelationFilter {
  every: LecturaMeteorologiaWhereInput
  some: LecturaMeteorologiaWhereInput
  none: LecturaMeteorologiaWhereInput
}

input UbicacionManyRelationFilter {
  every: UbicacionWhereInput
  some: UbicacionWhereInput
  none: UbicacionWhereInput
}

input UsuarioOrderByInput {
  id: OrderDirection
  usuario_id: OrderDirection
  nombre: OrderDirection
  email: OrderDirection
  telefono: OrderDirection
  fecha_creacion: OrderDirection
}

input UsuarioUpdateInput {
  usuario_id: Int
  nombre: String
  email: String
  contrasena: String
  telefono: String
  fecha_creacion: DateTime
  fotos: FotoCieloRelateToManyForUpdateInput
  lecturas: LecturaMeteorologiaRelateToManyForUpdateInput
  ubicaciones: UbicacionRelateToManyForUpdateInput
}

input FotoCieloRelateToManyForUpdateInput {
  disconnect: [FotoCieloWhereUniqueInput!]
  set: [FotoCieloWhereUniqueInput!]
  create: [FotoCieloCreateInput!]
  connect: [FotoCieloWhereUniqueInput!]
}

input LecturaMeteorologiaRelateToManyForUpdateInput {
  disconnect: [LecturaMeteorologiaWhereUniqueInput!]
  set: [LecturaMeteorologiaWhereUniqueInput!]
  create: [LecturaMeteorologiaCreateInput!]
  connect: [LecturaMeteorologiaWhereUniqueInput!]
}

input UbicacionRelateToManyForUpdateInput {
  disconnect: [UbicacionWhereUniqueInput!]
  set: [UbicacionWhereUniqueInput!]
  create: [UbicacionCreateInput!]
  connect: [UbicacionWhereUniqueInput!]
}

input UsuarioUpdateArgs {
  where: UsuarioWhereUniqueInput!
  data: UsuarioUpdateInput!
}

input UsuarioCreateInput {
  usuario_id: Int
  nombre: String
  email: String
  contrasena: String
  telefono: String
  fecha_creacion: DateTime
  fotos: FotoCieloRelateToManyForCreateInput
  lecturas: LecturaMeteorologiaRelateToManyForCreateInput
  ubicaciones: UbicacionRelateToManyForCreateInput
}

input FotoCieloRelateToManyForCreateInput {
  create: [FotoCieloCreateInput!]
  connect: [FotoCieloWhereUniqueInput!]
}

input LecturaMeteorologiaRelateToManyForCreateInput {
  create: [LecturaMeteorologiaCreateInput!]
  connect: [LecturaMeteorologiaWhereUniqueInput!]
}

input UbicacionRelateToManyForCreateInput {
  create: [UbicacionCreateInput!]
  connect: [UbicacionWhereUniqueInput!]
}

type FotoCielo {
  id: ID!
  usuario_id: Int
  url_foto: String
  fecha_foto: DateTime
}

input FotoCieloWhereUniqueInput {
  id: ID
}

input FotoCieloWhereInput {
  AND: [FotoCieloWhereInput!]
  OR: [FotoCieloWhereInput!]
  NOT: [FotoCieloWhereInput!]
  id: IDFilter
  usuario_id: IntFilter
  url_foto: StringFilter
  fecha_foto: DateTimeNullableFilter
}

input FotoCieloOrderByInput {
  id: OrderDirection
  usuario_id: OrderDirection
  url_foto: OrderDirection
  fecha_foto: OrderDirection
}

input FotoCieloUpdateInput {
  usuario_id: Int
  url_foto: String
  fecha_foto: DateTime
}

input FotoCieloUpdateArgs {
  where: FotoCieloWhereUniqueInput!
  data: FotoCieloUpdateInput!
}

input FotoCieloCreateInput {
  usuario_id: Int
  url_foto: String
  fecha_foto: DateTime
}

type LecturaMeteorologia {
  id: ID!
  usuario_id(where: UsuarioWhereInput! = {}, orderBy: [UsuarioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UsuarioWhereUniqueInput): [Usuario!]
  usuario_idCount(where: UsuarioWhereInput! = {}): Int
  foto_id: FotoCielo
  temperatura: Float
  presion_atmosferica: Float
  humedad: Float
  api: Boolean
  fecha_lectura: DateTime
}

input LecturaMeteorologiaWhereUniqueInput {
  id: ID
}

input LecturaMeteorologiaWhereInput {
  AND: [LecturaMeteorologiaWhereInput!]
  OR: [LecturaMeteorologiaWhereInput!]
  NOT: [LecturaMeteorologiaWhereInput!]
  id: IDFilter
  usuario_id: UsuarioManyRelationFilter
  foto_id: FotoCieloWhereInput
  temperatura: FloatFilter
  presion_atmosferica: FloatFilter
  humedad: FloatFilter
  api: BooleanFilter
  fecha_lectura: DateTimeNullableFilter
}

input UsuarioManyRelationFilter {
  every: UsuarioWhereInput
  some: UsuarioWhereInput
  none: UsuarioWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input LecturaMeteorologiaOrderByInput {
  id: OrderDirection
  temperatura: OrderDirection
  presion_atmosferica: OrderDirection
  humedad: OrderDirection
  api: OrderDirection
  fecha_lectura: OrderDirection
}

input LecturaMeteorologiaUpdateInput {
  usuario_id: UsuarioRelateToManyForUpdateInput
  foto_id: FotoCieloRelateToOneForUpdateInput
  temperatura: Float
  presion_atmosferica: Float
  humedad: Float
  api: Boolean
  fecha_lectura: DateTime
}

input UsuarioRelateToManyForUpdateInput {
  disconnect: [UsuarioWhereUniqueInput!]
  set: [UsuarioWhereUniqueInput!]
  create: [UsuarioCreateInput!]
  connect: [UsuarioWhereUniqueInput!]
}

input FotoCieloRelateToOneForUpdateInput {
  create: FotoCieloCreateInput
  connect: FotoCieloWhereUniqueInput
  disconnect: Boolean
}

input LecturaMeteorologiaUpdateArgs {
  where: LecturaMeteorologiaWhereUniqueInput!
  data: LecturaMeteorologiaUpdateInput!
}

input LecturaMeteorologiaCreateInput {
  usuario_id: UsuarioRelateToManyForCreateInput
  foto_id: FotoCieloRelateToOneForCreateInput
  temperatura: Float
  presion_atmosferica: Float
  humedad: Float
  api: Boolean
  fecha_lectura: DateTime
}

input UsuarioRelateToManyForCreateInput {
  create: [UsuarioCreateInput!]
  connect: [UsuarioWhereUniqueInput!]
}

input FotoCieloRelateToOneForCreateInput {
  create: FotoCieloCreateInput
  connect: FotoCieloWhereUniqueInput
}

type Ubicacion {
  id: ID!
  latitud: Int
  longitud: Int
  usuario_id(where: UsuarioWhereInput! = {}, orderBy: [UsuarioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UsuarioWhereUniqueInput): [Usuario!]
  usuario_idCount(where: UsuarioWhereInput! = {}): Int
}

input UbicacionWhereUniqueInput {
  id: ID
}

input UbicacionWhereInput {
  AND: [UbicacionWhereInput!]
  OR: [UbicacionWhereInput!]
  NOT: [UbicacionWhereInput!]
  id: IDFilter
  latitud: IntFilter
  longitud: IntFilter
  usuario_id: UsuarioManyRelationFilter
}

input UbicacionOrderByInput {
  id: OrderDirection
  latitud: OrderDirection
  longitud: OrderDirection
}

input UbicacionUpdateInput {
  latitud: Int
  longitud: Int
  usuario_id: UsuarioRelateToManyForUpdateInput
}

input UbicacionUpdateArgs {
  where: UbicacionWhereUniqueInput!
  data: UbicacionUpdateInput!
}

input UbicacionCreateInput {
  latitud: Int
  longitud: Int
  usuario_id: UsuarioRelateToManyForCreateInput
}

type AnalisisFoto {
  id: ID!
  foto_id: FotoCielo
  descripcion: String
  prediccion: String
}

input AnalisisFotoWhereUniqueInput {
  id: ID
}

input AnalisisFotoWhereInput {
  AND: [AnalisisFotoWhereInput!]
  OR: [AnalisisFotoWhereInput!]
  NOT: [AnalisisFotoWhereInput!]
  id: IDFilter
  foto_id: FotoCieloWhereInput
  descripcion: StringFilter
  prediccion: StringFilter
}

input AnalisisFotoOrderByInput {
  id: OrderDirection
  descripcion: OrderDirection
  prediccion: OrderDirection
}

input AnalisisFotoUpdateInput {
  foto_id: FotoCieloRelateToOneForUpdateInput
  descripcion: String
  prediccion: String
}

input AnalisisFotoUpdateArgs {
  where: AnalisisFotoWhereUniqueInput!
  data: AnalisisFotoUpdateInput!
}

input AnalisisFotoCreateInput {
  foto_id: FotoCieloRelateToOneForCreateInput
  descripcion: String
  prediccion: String
}

type authentication {
  id: ID!
  tokenId: String
  associatedUser: Usuario
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input authenticationWhereUniqueInput {
  id: ID
  tokenId: String
}

input authenticationWhereInput {
  AND: [authenticationWhereInput!]
  OR: [authenticationWhereInput!]
  NOT: [authenticationWhereInput!]
  id: IDFilter
  tokenId: StringFilter
  associatedUser: UsuarioWhereInput
  expirationDate: DateTimeNullableFilter
  authenticationType: StringNullableFilter
  adAuthenticationToken: StringFilter
  refreshToken: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input authenticationOrderByInput {
  id: OrderDirection
  tokenId: OrderDirection
  expirationDate: OrderDirection
  authenticationType: OrderDirection
  adAuthenticationToken: OrderDirection
  refreshToken: OrderDirection
}

input authenticationUpdateInput {
  tokenId: String
  associatedUser: UsuarioRelateToOneForUpdateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UsuarioRelateToOneForUpdateInput {
  create: UsuarioCreateInput
  connect: UsuarioWhereUniqueInput
  disconnect: Boolean
}

input authenticationUpdateArgs {
  where: authenticationWhereUniqueInput!
  data: authenticationUpdateInput!
}

input authenticationCreateInput {
  tokenId: String
  associatedUser: UsuarioRelateToOneForCreateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UsuarioRelateToOneForCreateInput {
  create: UsuarioCreateInput
  connect: UsuarioWhereUniqueInput
}

type azureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input azureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input azureADIntegrationWhereInput {
  AND: [azureADIntegrationWhereInput!]
  OR: [azureADIntegrationWhereInput!]
  NOT: [azureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input azureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

input azureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input azureADIntegrationUpdateArgs {
  where: azureADIntegrationWhereUniqueInput!
  data: azureADIntegrationUpdateInput!
}

input azureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createLogin(data: LoginCreateInput!): Login
  createLogins(data: [LoginCreateInput!]!): [Login]
  updateLogin(where: LoginWhereUniqueInput!, data: LoginUpdateInput!): Login
  updateLogins(data: [LoginUpdateArgs!]!): [Login]
  deleteLogin(where: LoginWhereUniqueInput!): Login
  deleteLogins(where: [LoginWhereUniqueInput!]!): [Login]
  createUsuario(data: UsuarioCreateInput!): Usuario
  createUsuarios(data: [UsuarioCreateInput!]!): [Usuario]
  updateUsuario(where: UsuarioWhereUniqueInput!, data: UsuarioUpdateInput!): Usuario
  updateUsuarios(data: [UsuarioUpdateArgs!]!): [Usuario]
  deleteUsuario(where: UsuarioWhereUniqueInput!): Usuario
  deleteUsuarios(where: [UsuarioWhereUniqueInput!]!): [Usuario]
  createFotoCielo(data: FotoCieloCreateInput!): FotoCielo
  createFotoCielos(data: [FotoCieloCreateInput!]!): [FotoCielo]
  updateFotoCielo(where: FotoCieloWhereUniqueInput!, data: FotoCieloUpdateInput!): FotoCielo
  updateFotoCielos(data: [FotoCieloUpdateArgs!]!): [FotoCielo]
  deleteFotoCielo(where: FotoCieloWhereUniqueInput!): FotoCielo
  deleteFotoCielos(where: [FotoCieloWhereUniqueInput!]!): [FotoCielo]
  createLecturaMeteorologia(data: LecturaMeteorologiaCreateInput!): LecturaMeteorologia
  createLecturaMeteorologias(data: [LecturaMeteorologiaCreateInput!]!): [LecturaMeteorologia]
  updateLecturaMeteorologia(where: LecturaMeteorologiaWhereUniqueInput!, data: LecturaMeteorologiaUpdateInput!): LecturaMeteorologia
  updateLecturaMeteorologias(data: [LecturaMeteorologiaUpdateArgs!]!): [LecturaMeteorologia]
  deleteLecturaMeteorologia(where: LecturaMeteorologiaWhereUniqueInput!): LecturaMeteorologia
  deleteLecturaMeteorologias(where: [LecturaMeteorologiaWhereUniqueInput!]!): [LecturaMeteorologia]
  createUbicacion(data: UbicacionCreateInput!): Ubicacion
  createUbicacions(data: [UbicacionCreateInput!]!): [Ubicacion]
  updateUbicacion(where: UbicacionWhereUniqueInput!, data: UbicacionUpdateInput!): Ubicacion
  updateUbicacions(data: [UbicacionUpdateArgs!]!): [Ubicacion]
  deleteUbicacion(where: UbicacionWhereUniqueInput!): Ubicacion
  deleteUbicacions(where: [UbicacionWhereUniqueInput!]!): [Ubicacion]
  createAnalisisFoto(data: AnalisisFotoCreateInput!): AnalisisFoto
  createAnalisisFotos(data: [AnalisisFotoCreateInput!]!): [AnalisisFoto]
  updateAnalisisFoto(where: AnalisisFotoWhereUniqueInput!, data: AnalisisFotoUpdateInput!): AnalisisFoto
  updateAnalisisFotos(data: [AnalisisFotoUpdateArgs!]!): [AnalisisFoto]
  deleteAnalisisFoto(where: AnalisisFotoWhereUniqueInput!): AnalisisFoto
  deleteAnalisisFotos(where: [AnalisisFotoWhereUniqueInput!]!): [AnalisisFoto]
  createauthentication(data: authenticationCreateInput!): authentication
  createAuthentications(data: [authenticationCreateInput!]!): [authentication]
  updateauthentication(where: authenticationWhereUniqueInput!, data: authenticationUpdateInput!): authentication
  updateAuthentications(data: [authenticationUpdateArgs!]!): [authentication]
  deleteauthentication(where: authenticationWhereUniqueInput!): authentication
  deleteAuthentications(where: [authenticationWhereUniqueInput!]!): [authentication]
  createazureADIntegration(data: azureADIntegrationCreateInput!): azureADIntegration
  createAzureADIntegrations(data: [azureADIntegrationCreateInput!]!): [azureADIntegration]
  updateazureADIntegration(where: azureADIntegrationWhereUniqueInput!, data: azureADIntegrationUpdateInput!): azureADIntegration
  updateAzureADIntegrations(data: [azureADIntegrationUpdateArgs!]!): [azureADIntegration]
  deleteazureADIntegration(where: azureADIntegrationWhereUniqueInput!): azureADIntegration
  deleteAzureADIntegrations(where: [azureADIntegrationWhereUniqueInput!]!): [azureADIntegration]
}

type Query {
  login(where: LoginWhereUniqueInput!): Login
  logins(where: LoginWhereInput! = {}, orderBy: [LoginOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoginWhereUniqueInput): [Login!]
  loginsCount(where: LoginWhereInput! = {}): Int
  usuario(where: UsuarioWhereUniqueInput!): Usuario
  usuarios(where: UsuarioWhereInput! = {}, orderBy: [UsuarioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UsuarioWhereUniqueInput): [Usuario!]
  usuariosCount(where: UsuarioWhereInput! = {}): Int
  fotoCielo(where: FotoCieloWhereUniqueInput!): FotoCielo
  fotoCielos(where: FotoCieloWhereInput! = {}, orderBy: [FotoCieloOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FotoCieloWhereUniqueInput): [FotoCielo!]
  fotoCielosCount(where: FotoCieloWhereInput! = {}): Int
  lecturaMeteorologia(where: LecturaMeteorologiaWhereUniqueInput!): LecturaMeteorologia
  lecturaMeteorologias(where: LecturaMeteorologiaWhereInput! = {}, orderBy: [LecturaMeteorologiaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LecturaMeteorologiaWhereUniqueInput): [LecturaMeteorologia!]
  lecturaMeteorologiasCount(where: LecturaMeteorologiaWhereInput! = {}): Int
  ubicacion(where: UbicacionWhereUniqueInput!): Ubicacion
  ubicacions(where: UbicacionWhereInput! = {}, orderBy: [UbicacionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UbicacionWhereUniqueInput): [Ubicacion!]
  ubicacionsCount(where: UbicacionWhereInput! = {}): Int
  analisisFoto(where: AnalisisFotoWhereUniqueInput!): AnalisisFoto
  analisisFotos(where: AnalisisFotoWhereInput! = {}, orderBy: [AnalisisFotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnalisisFotoWhereUniqueInput): [AnalisisFoto!]
  analisisFotosCount(where: AnalisisFotoWhereInput! = {}): Int
  authentication(where: authenticationWhereUniqueInput!): authentication
  authentications(where: authenticationWhereInput! = {}, orderBy: [authenticationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: authenticationWhereUniqueInput): [authentication!]
  authenticationsCount(where: authenticationWhereInput! = {}): Int
  azureADIntegration(where: azureADIntegrationWhereUniqueInput!): azureADIntegration
  azureADIntegrations(where: azureADIntegrationWhereInput! = {}, orderBy: [azureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: azureADIntegrationWhereUniqueInput): [azureADIntegration!]
  azureADIntegrationsCount(where: azureADIntegrationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
