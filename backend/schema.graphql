# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  phone: String
  sucription_premiun: Boolean
  creation_date: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  sucription_premiun: BooleanFilter
  creation_date: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  sucription_premiun: OrderDirection
  creation_date: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  phone: String
  sucription_premiun: Boolean
  creation_date: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  phone: String
  sucription_premiun: Boolean
  creation_date: DateTime
}

type PhotoSky {
  id: ID!
  user_id(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user_idCount(where: UserWhereInput! = {}): Int
  url_photo: String
  latitude: Float
  longitude: Float
  date_photo: DateTime
}

input PhotoSkyWhereUniqueInput {
  id: ID
}

input PhotoSkyWhereInput {
  AND: [PhotoSkyWhereInput!]
  OR: [PhotoSkyWhereInput!]
  NOT: [PhotoSkyWhereInput!]
  id: IDFilter
  user_id: UserManyRelationFilter
  url_photo: StringFilter
  latitude: FloatFilter
  longitude: FloatFilter
  date_photo: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input PhotoSkyOrderByInput {
  id: OrderDirection
  url_photo: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  date_photo: OrderDirection
}

input PhotoSkyUpdateInput {
  user_id: UserRelateToManyForUpdateInput
  url_photo: String
  latitude: Float
  longitude: Float
  date_photo: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PhotoSkyUpdateArgs {
  where: PhotoSkyWhereUniqueInput!
  data: PhotoSkyUpdateInput!
}

input PhotoSkyCreateInput {
  user_id: UserRelateToManyForCreateInput
  url_photo: String
  latitude: Float
  longitude: Float
  date_photo: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type WeatheReading {
  id: ID!
  temperature: Float
  atmospheric_pressure: Float
  humidity: Float
  api: Boolean
  reading_date: DateTime
  user_id(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user_idCount(where: UserWhereInput! = {}): Int
}

input WeatheReadingWhereUniqueInput {
  id: ID
}

input WeatheReadingWhereInput {
  AND: [WeatheReadingWhereInput!]
  OR: [WeatheReadingWhereInput!]
  NOT: [WeatheReadingWhereInput!]
  id: IDFilter
  temperature: FloatFilter
  atmospheric_pressure: FloatNullableFilter
  humidity: FloatFilter
  api: BooleanFilter
  reading_date: DateTimeNullableFilter
  user_id: UserManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input WeatheReadingOrderByInput {
  id: OrderDirection
  temperature: OrderDirection
  atmospheric_pressure: OrderDirection
  humidity: OrderDirection
  api: OrderDirection
  reading_date: OrderDirection
}

input WeatheReadingUpdateInput {
  temperature: Float
  atmospheric_pressure: Float
  humidity: Float
  api: Boolean
  reading_date: DateTime
  user_id: UserRelateToManyForUpdateInput
}

input WeatheReadingUpdateArgs {
  where: WeatheReadingWhereUniqueInput!
  data: WeatheReadingUpdateInput!
}

input WeatheReadingCreateInput {
  temperature: Float
  atmospheric_pressure: Float
  humidity: Float
  api: Boolean
  reading_date: DateTime
  user_id: UserRelateToManyForCreateInput
}

type AnalysisPhoto {
  id: ID!
  skyphoto_id: PhotoSky
  sky_type: String
  probability_rain: String
}

input AnalysisPhotoWhereUniqueInput {
  id: ID
}

input AnalysisPhotoWhereInput {
  AND: [AnalysisPhotoWhereInput!]
  OR: [AnalysisPhotoWhereInput!]
  NOT: [AnalysisPhotoWhereInput!]
  id: IDFilter
  skyphoto_id: PhotoSkyWhereInput
  sky_type: StringFilter
  probability_rain: StringFilter
}

input AnalysisPhotoOrderByInput {
  id: OrderDirection
  sky_type: OrderDirection
  probability_rain: OrderDirection
}

input AnalysisPhotoUpdateInput {
  skyphoto_id: PhotoSkyRelateToOneForUpdateInput
  sky_type: String
  probability_rain: String
}

input PhotoSkyRelateToOneForUpdateInput {
  create: PhotoSkyCreateInput
  connect: PhotoSkyWhereUniqueInput
  disconnect: Boolean
}

input AnalysisPhotoUpdateArgs {
  where: AnalysisPhotoWhereUniqueInput!
  data: AnalysisPhotoUpdateInput!
}

input AnalysisPhotoCreateInput {
  skyphoto_id: PhotoSkyRelateToOneForCreateInput
  sky_type: String
  probability_rain: String
}

input PhotoSkyRelateToOneForCreateInput {
  create: PhotoSkyCreateInput
  connect: PhotoSkyWhereUniqueInput
}

type APIPredicion {
  id: ID!
  skyphoto_id: PhotoSky
  prediction_per_day: String
  prediction_per_hour: String
}

input APIPredicionWhereUniqueInput {
  id: ID
}

input APIPredicionWhereInput {
  AND: [APIPredicionWhereInput!]
  OR: [APIPredicionWhereInput!]
  NOT: [APIPredicionWhereInput!]
  id: IDFilter
  skyphoto_id: PhotoSkyWhereInput
  prediction_per_day: StringFilter
  prediction_per_hour: StringFilter
}

input APIPredicionOrderByInput {
  id: OrderDirection
  prediction_per_day: OrderDirection
  prediction_per_hour: OrderDirection
}

input APIPredicionUpdateInput {
  skyphoto_id: PhotoSkyRelateToOneForUpdateInput
  prediction_per_day: String
  prediction_per_hour: String
}

input APIPredicionUpdateArgs {
  where: APIPredicionWhereUniqueInput!
  data: APIPredicionUpdateInput!
}

input APIPredicionCreateInput {
  skyphoto_id: PhotoSkyRelateToOneForCreateInput
  prediction_per_day: String
  prediction_per_hour: String
}

type authentication {
  id: ID!
  tokenId: String
  associatedUser: User
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input authenticationWhereUniqueInput {
  id: ID
  tokenId: String
}

input authenticationWhereInput {
  AND: [authenticationWhereInput!]
  OR: [authenticationWhereInput!]
  NOT: [authenticationWhereInput!]
  id: IDFilter
  tokenId: StringFilter
  associatedUser: UserWhereInput
  expirationDate: DateTimeNullableFilter
  authenticationType: StringNullableFilter
  adAuthenticationToken: StringFilter
  refreshToken: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input authenticationOrderByInput {
  id: OrderDirection
  tokenId: OrderDirection
  expirationDate: OrderDirection
  authenticationType: OrderDirection
  adAuthenticationToken: OrderDirection
  refreshToken: OrderDirection
}

input authenticationUpdateInput {
  tokenId: String
  associatedUser: UserRelateToOneForUpdateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input authenticationUpdateArgs {
  where: authenticationWhereUniqueInput!
  data: authenticationUpdateInput!
}

input authenticationCreateInput {
  tokenId: String
  associatedUser: UserRelateToOneForCreateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type azureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input azureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input azureADIntegrationWhereInput {
  AND: [azureADIntegrationWhereInput!]
  OR: [azureADIntegrationWhereInput!]
  NOT: [azureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input azureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

input azureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input azureADIntegrationUpdateArgs {
  where: azureADIntegrationWhereUniqueInput!
  data: azureADIntegrationUpdateInput!
}

input azureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPhotoSky(data: PhotoSkyCreateInput!): PhotoSky
  createPhotoSkies(data: [PhotoSkyCreateInput!]!): [PhotoSky]
  updatePhotoSky(where: PhotoSkyWhereUniqueInput!, data: PhotoSkyUpdateInput!): PhotoSky
  updatePhotoSkies(data: [PhotoSkyUpdateArgs!]!): [PhotoSky]
  deletePhotoSky(where: PhotoSkyWhereUniqueInput!): PhotoSky
  deletePhotoSkies(where: [PhotoSkyWhereUniqueInput!]!): [PhotoSky]
  createWeatheReading(data: WeatheReadingCreateInput!): WeatheReading
  createWeatheReadings(data: [WeatheReadingCreateInput!]!): [WeatheReading]
  updateWeatheReading(where: WeatheReadingWhereUniqueInput!, data: WeatheReadingUpdateInput!): WeatheReading
  updateWeatheReadings(data: [WeatheReadingUpdateArgs!]!): [WeatheReading]
  deleteWeatheReading(where: WeatheReadingWhereUniqueInput!): WeatheReading
  deleteWeatheReadings(where: [WeatheReadingWhereUniqueInput!]!): [WeatheReading]
  createAnalysisPhoto(data: AnalysisPhotoCreateInput!): AnalysisPhoto
  createAnalysisPhotos(data: [AnalysisPhotoCreateInput!]!): [AnalysisPhoto]
  updateAnalysisPhoto(where: AnalysisPhotoWhereUniqueInput!, data: AnalysisPhotoUpdateInput!): AnalysisPhoto
  updateAnalysisPhotos(data: [AnalysisPhotoUpdateArgs!]!): [AnalysisPhoto]
  deleteAnalysisPhoto(where: AnalysisPhotoWhereUniqueInput!): AnalysisPhoto
  deleteAnalysisPhotos(where: [AnalysisPhotoWhereUniqueInput!]!): [AnalysisPhoto]
  createAPIPredicion(data: APIPredicionCreateInput!): APIPredicion
  createAPIPredicions(data: [APIPredicionCreateInput!]!): [APIPredicion]
  updateAPIPredicion(where: APIPredicionWhereUniqueInput!, data: APIPredicionUpdateInput!): APIPredicion
  updateAPIPredicions(data: [APIPredicionUpdateArgs!]!): [APIPredicion]
  deleteAPIPredicion(where: APIPredicionWhereUniqueInput!): APIPredicion
  deleteAPIPredicions(where: [APIPredicionWhereUniqueInput!]!): [APIPredicion]
  createauthentication(data: authenticationCreateInput!): authentication
  createAuthentications(data: [authenticationCreateInput!]!): [authentication]
  updateauthentication(where: authenticationWhereUniqueInput!, data: authenticationUpdateInput!): authentication
  updateAuthentications(data: [authenticationUpdateArgs!]!): [authentication]
  deleteauthentication(where: authenticationWhereUniqueInput!): authentication
  deleteAuthentications(where: [authenticationWhereUniqueInput!]!): [authentication]
  createazureADIntegration(data: azureADIntegrationCreateInput!): azureADIntegration
  createAzureADIntegrations(data: [azureADIntegrationCreateInput!]!): [azureADIntegration]
  updateazureADIntegration(where: azureADIntegrationWhereUniqueInput!, data: azureADIntegrationUpdateInput!): azureADIntegration
  updateAzureADIntegrations(data: [azureADIntegrationUpdateArgs!]!): [azureADIntegration]
  deleteazureADIntegration(where: azureADIntegrationWhereUniqueInput!): azureADIntegration
  deleteAzureADIntegrations(where: [azureADIntegrationWhereUniqueInput!]!): [azureADIntegration]
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  photoSky(where: PhotoSkyWhereUniqueInput!): PhotoSky
  photoSkies(where: PhotoSkyWhereInput! = {}, orderBy: [PhotoSkyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoSkyWhereUniqueInput): [PhotoSky!]
  photoSkiesCount(where: PhotoSkyWhereInput! = {}): Int
  weatheReading(where: WeatheReadingWhereUniqueInput!): WeatheReading
  weatheReadings(where: WeatheReadingWhereInput! = {}, orderBy: [WeatheReadingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WeatheReadingWhereUniqueInput): [WeatheReading!]
  weatheReadingsCount(where: WeatheReadingWhereInput! = {}): Int
  analysisPhoto(where: AnalysisPhotoWhereUniqueInput!): AnalysisPhoto
  analysisPhotos(where: AnalysisPhotoWhereInput! = {}, orderBy: [AnalysisPhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnalysisPhotoWhereUniqueInput): [AnalysisPhoto!]
  analysisPhotosCount(where: AnalysisPhotoWhereInput! = {}): Int
  aPIPredicion(where: APIPredicionWhereUniqueInput!): APIPredicion
  aPIPredicions(where: APIPredicionWhereInput! = {}, orderBy: [APIPredicionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: APIPredicionWhereUniqueInput): [APIPredicion!]
  aPIPredicionsCount(where: APIPredicionWhereInput! = {}): Int
  authentication(where: authenticationWhereUniqueInput!): authentication
  authentications(where: authenticationWhereInput! = {}, orderBy: [authenticationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: authenticationWhereUniqueInput): [authentication!]
  authenticationsCount(where: authenticationWhereInput! = {}): Int
  azureADIntegration(where: azureADIntegrationWhereUniqueInput!): azureADIntegration
  azureADIntegrations(where: azureADIntegrationWhereInput! = {}, orderBy: [azureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: azureADIntegrationWhereUniqueInput): [azureADIntegration!]
  azureADIntegrationsCount(where: azureADIntegrationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
