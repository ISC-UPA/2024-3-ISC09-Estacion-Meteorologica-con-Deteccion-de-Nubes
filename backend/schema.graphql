# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Login {
  id: ID!
  idUser: Int
  nombre: String
  username: String
  passsword: String
}

input LoginWhereUniqueInput {
  id: ID
  idUser: Int
}

input LoginWhereInput {
  AND: [LoginWhereInput!]
  OR: [LoginWhereInput!]
  NOT: [LoginWhereInput!]
  id: IDFilter
  idUser: IntFilter
  nombre: StringFilter
  username: StringFilter
  passsword: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input LoginOrderByInput {
  id: OrderDirection
  idUser: OrderDirection
  nombre: OrderDirection
  username: OrderDirection
  passsword: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input LoginUpdateInput {
  idUser: Int
  nombre: String
  username: String
  passsword: String
}

input LoginUpdateArgs {
  where: LoginWhereUniqueInput!
  data: LoginUpdateInput!
}

input LoginCreateInput {
  idUser: Int
  nombre: String
  username: String
  passsword: String
}

type Ubicacione {
  id: ID!
  idLocacion: Int
  nombre: String
  latitud: Int
  longitud: Int
}

input UbicacioneWhereUniqueInput {
  id: ID
  idLocacion: Int
}

input UbicacioneWhereInput {
  AND: [UbicacioneWhereInput!]
  OR: [UbicacioneWhereInput!]
  NOT: [UbicacioneWhereInput!]
  id: IDFilter
  idLocacion: IntFilter
  nombre: StringFilter
  latitud: IntFilter
  longitud: IntFilter
}

input UbicacioneOrderByInput {
  id: OrderDirection
  idLocacion: OrderDirection
  nombre: OrderDirection
  latitud: OrderDirection
  longitud: OrderDirection
}

input UbicacioneUpdateInput {
  idLocacion: Int
  nombre: String
  latitud: Int
  longitud: Int
}

input UbicacioneUpdateArgs {
  where: UbicacioneWhereUniqueInput!
  data: UbicacioneUpdateInput!
}

input UbicacioneCreateInput {
  idLocacion: Int
  nombre: String
  latitud: Int
  longitud: Int
}

type Temperatura {
  id: ID!
  idTemperatura: Int
  valor: Int
  timestamp: DateTime
  idLocacion: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TemperaturaWhereUniqueInput {
  id: ID
  idTemperatura: Int
}

input TemperaturaWhereInput {
  AND: [TemperaturaWhereInput!]
  OR: [TemperaturaWhereInput!]
  NOT: [TemperaturaWhereInput!]
  id: IDFilter
  idTemperatura: IntFilter
  valor: IntFilter
  timestamp: DateTimeFilter
  idLocacion: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TemperaturaOrderByInput {
  id: OrderDirection
  idTemperatura: OrderDirection
  valor: OrderDirection
  timestamp: OrderDirection
  idLocacion: OrderDirection
}

input TemperaturaUpdateInput {
  idTemperatura: Int
  valor: Int
  timestamp: DateTime
  idLocacion: String
}

input TemperaturaUpdateArgs {
  where: TemperaturaWhereUniqueInput!
  data: TemperaturaUpdateInput!
}

input TemperaturaCreateInput {
  idTemperatura: Int
  valor: Int
  timestamp: DateTime
  idLocacion: String
}

type Humedade {
  id: ID!
  idHumedad: Int
  valor: Int
  timestamp: DateTime
  idLocacion: String
}

input HumedadeWhereUniqueInput {
  id: ID
  idHumedad: Int
}

input HumedadeWhereInput {
  AND: [HumedadeWhereInput!]
  OR: [HumedadeWhereInput!]
  NOT: [HumedadeWhereInput!]
  id: IDFilter
  idHumedad: IntFilter
  valor: IntFilter
  timestamp: DateTimeFilter
  idLocacion: StringFilter
}

input HumedadeOrderByInput {
  id: OrderDirection
  idHumedad: OrderDirection
  valor: OrderDirection
  timestamp: OrderDirection
  idLocacion: OrderDirection
}

input HumedadeUpdateInput {
  idHumedad: Int
  valor: Int
  timestamp: DateTime
  idLocacion: String
}

input HumedadeUpdateArgs {
  where: HumedadeWhereUniqueInput!
  data: HumedadeUpdateInput!
}

input HumedadeCreateInput {
  idHumedad: Int
  valor: Int
  timestamp: DateTime
  idLocacion: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createLogin(data: LoginCreateInput!): Login
  createLogins(data: [LoginCreateInput!]!): [Login]
  updateLogin(where: LoginWhereUniqueInput!, data: LoginUpdateInput!): Login
  updateLogins(data: [LoginUpdateArgs!]!): [Login]
  deleteLogin(where: LoginWhereUniqueInput!): Login
  deleteLogins(where: [LoginWhereUniqueInput!]!): [Login]
  createUbicacione(data: UbicacioneCreateInput!): Ubicacione
  createUbicaciones(data: [UbicacioneCreateInput!]!): [Ubicacione]
  updateUbicacione(where: UbicacioneWhereUniqueInput!, data: UbicacioneUpdateInput!): Ubicacione
  updateUbicaciones(data: [UbicacioneUpdateArgs!]!): [Ubicacione]
  deleteUbicacione(where: UbicacioneWhereUniqueInput!): Ubicacione
  deleteUbicaciones(where: [UbicacioneWhereUniqueInput!]!): [Ubicacione]
  createTemperatura(data: TemperaturaCreateInput!): Temperatura
  createTemperaturas(data: [TemperaturaCreateInput!]!): [Temperatura]
  updateTemperatura(where: TemperaturaWhereUniqueInput!, data: TemperaturaUpdateInput!): Temperatura
  updateTemperaturas(data: [TemperaturaUpdateArgs!]!): [Temperatura]
  deleteTemperatura(where: TemperaturaWhereUniqueInput!): Temperatura
  deleteTemperaturas(where: [TemperaturaWhereUniqueInput!]!): [Temperatura]
  createHumedade(data: HumedadeCreateInput!): Humedade
  createHumedades(data: [HumedadeCreateInput!]!): [Humedade]
  updateHumedade(where: HumedadeWhereUniqueInput!, data: HumedadeUpdateInput!): Humedade
  updateHumedades(data: [HumedadeUpdateArgs!]!): [Humedade]
  deleteHumedade(where: HumedadeWhereUniqueInput!): Humedade
  deleteHumedades(where: [HumedadeWhereUniqueInput!]!): [Humedade]
}

type Query {
  login(where: LoginWhereUniqueInput!): Login
  logins(where: LoginWhereInput! = {}, orderBy: [LoginOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoginWhereUniqueInput): [Login!]
  loginsCount(where: LoginWhereInput! = {}): Int
  ubicacione(where: UbicacioneWhereUniqueInput!): Ubicacione
  ubicaciones(where: UbicacioneWhereInput! = {}, orderBy: [UbicacioneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UbicacioneWhereUniqueInput): [Ubicacione!]
  ubicacionesCount(where: UbicacioneWhereInput! = {}): Int
  temperatura(where: TemperaturaWhereUniqueInput!): Temperatura
  temperaturas(where: TemperaturaWhereInput! = {}, orderBy: [TemperaturaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TemperaturaWhereUniqueInput): [Temperatura!]
  temperaturasCount(where: TemperaturaWhereInput! = {}): Int
  humedade(where: HumedadeWhereUniqueInput!): Humedade
  humedades(where: HumedadeWhereInput! = {}, orderBy: [HumedadeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HumedadeWhereUniqueInput): [Humedade!]
  humedadesCount(where: HumedadeWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
